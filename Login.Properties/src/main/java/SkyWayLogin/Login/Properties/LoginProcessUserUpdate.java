package SkyWayLogin.Login.Properties;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.core.Response;

import EntityDTO.RequestDTO;
import EntityDTO.UserDTO;
import ErrorResponse.ResponseEnumCommon;
import PasswordUtil.PasswordHashUtil;
import ResponseCommon.LoginProcessResponse;
import util.IntegerUtil;
import util.StringUtil;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * @author Masaki_Fukaya
 *
 */
@RequestScoped
public class LoginProcessUserUpdate {

	@Inject
	private StringUtil stringutil = new StringUtil();
	
	private IntegerUtil integerutil = new IntegerUtil();
	
	UserDTO body = new UserDTO();
	
	RequestDTO request = new RequestDTO();
	
	private static final String TAB = "\t";
	
	private static Logger log;
	
	public LoginProcessUserUpdate() {
		log = LogManager.getLogger(LoginProcessUserUpdate.this);
	}

	public Response GenerateResponse(ResponseEnumCommon responseenumcommon) {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		loginprocessresponse.setTime(LocalDateTime.now().toString());
		loginprocessresponse.setCode(responseenumcommon.getStatus());
		loginprocessresponse.setMessage(responseenumcommon.getResponseMessage());
		return Response.status(responseenumcommon.getStatus()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param body
	 * @param request
	 * @return
	 * @throws Exception
	 */
	public Response service(UserDTO body, RequestDTO request) throws Exception {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		ResponseEnumCommon responseenumcommon = ResponseEnumCommon.S200;
		StringBuilder date = new StringBuilder();
		StringBuilder safetyuserid = new StringBuilder();
		StringBuilder safetypass = new StringBuilder();
		StringBuilder uuidforId = new StringBuilder();
		StringBuilder uuidforPassword = new StringBuilder();
		StringBuilder identityid = new StringBuilder();
		StringBuilder identitypass = new StringBuilder();
		
		Response TypeResponses = RequestBodyCheck(body, request);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = UpdateDateTimeAuto(date);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = AutoGeneratedUseridHash(request, safetyuserid);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = AutoGeneratedPasswordHash(request, safetypass);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = CreateUserIdentityIdUUID(uuidforId);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = CreateUserIdentityPasswordUUID(uuidforPassword);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = CreateUserIdentityId(uuidforId, safetyuserid, identityid);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = CreateUserIdentityPassword(uuidforPassword, safetypass, identitypass);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = ChangeUserInformation(request, safetypass, safetyuserid, identityid, identitypass);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		loginprocessresponse.setTime(LocalDateTime.now().toString());
		loginprocessresponse.setCode(responseenumcommon.getStatus());
		loginprocessresponse.setMessage(responseenumcommon.getResponseMessage());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param body
	 * @param request
	 * @return
	 */
	private Response RequestBodyCheck(UserDTO body, RequestDTO request) {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execute condition
		log.info("Method:RequestBodyCheck is Call for Service");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:RequestBodyCheck Start Time is " + LocalDateTime.now());
		if(stringutil.isNullorEmpty(request.getpassword()) || 
			stringutil.isNullorEmpty(request.getname()) ||
			stringutil.isNullorEmpty(request.getuserid()) ||
			integerutil.isNullorEmpty(request.getage()) ||
			stringutil.isNullorEmpty(request.getadress()) || 
			stringutil.isNullorEmpty(request.getmailadress())) {
			return GenerateResponse(ResponseEnumCommon.E400);
		}
		log.info(request.getpassword());
			log.info(request.getname());
				log.info(request.getuserid());
					log.info(request.getage());
						log.info(request.getadress());
							log.info(request.getmailadress());
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:RequestBodyCheck Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param date
	 * @return
	 */
	private Response UpdateDateTimeAuto(StringBuilder date) {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:UpdateDateTimeAuto is Finished after RequestBodyCheck");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:UpdateDateTimeAuto Start Time is " + LocalDateTime.now());
		LocalDateTime nowDateTime = LocalDateTime.now();
		DateTimeFormatter java8Format = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
		String java8Disp = nowDateTime.format(java8Format );
		date.append(java8Disp);
		log.info(java8Disp);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:UpdateDateTimeAuto Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param request
	 * @param safetyuserid
	 * @return
	 */
	private Response AutoGeneratedUseridHash(RequestDTO request, StringBuilder safetyuserid) {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:AutoGeneratedUseridHash is Finished after UpdateDateTimeAuto");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:AutoGeneratedUseridHash Start Time is " + LocalDateTime.now());
		String safetyPassword1 = PasswordHashUtil.getSaftyPassword("password", request.getuserid());
       // System.out.println(safetyPassword1);
        safetyuserid.append(safetyPassword1);
        log.info(safetyPassword1);
        log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:AutoGeneratedUseridHash Finish Time is " + LocalDateTime.now());
        return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param request
	 * @param safetypass
	 * @return
	 */
	private Response AutoGeneratedPasswordHash(RequestDTO request, StringBuilder safetypass) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		log.info("Method:AutoGeneratedPasswordHash is Finished after AutoGeneratedUseridHash");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:AutoGeneratedPasswordHash Start Time is " + LocalDateTime.now());
		String safetyPassword1 = PasswordHashUtil.getSaftyPassword("password", request.getpassword());
        //System.out.println(safetyPassword1);
        safetypass.append(safetyPassword1);
        log.info(safetyPassword1);
        log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:AutoGeneratedPasswordHash Finish Time is " + LocalDateTime.now());
        return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param uuidforId
	 * @return
	 */
	private Response CreateUserIdentityIdUUID(StringBuilder uuidforId) {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:CreateUserIdentityIdUUID is Finished after AutoGeneratedPasswordHash");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityIdUUID Start Time is " + LocalDateTime.now());
		UUID UserIdIdentityUUID = UUID.randomUUID();
		uuidforId.append(UserIdIdentityUUID);
		//System.out.println(UserIdIdentityUUID);
		log.info(UserIdIdentityUUID);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityIdUUID Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param uuidforPassword
	 * @return
	 */
	private Response CreateUserIdentityPasswordUUID(StringBuilder uuidforPassword) {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:CreateUserIdentityPasswordUUID is Finished after CreateUserIdentityIdUUID");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityPasswordUUID Start Time is " + LocalDateTime.now());
		UUID UserPasswordIdentityUUID = UUID.randomUUID();
		uuidforPassword.append(UserPasswordIdentityUUID);
		//System.out.println(UserPasswordIdentityUUID);
		log.info(UserPasswordIdentityUUID);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityPasswordUUID Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param uuidforId
	 * @param safetyuserid
	 * @param identityid
	 * @return
	 */
	private Response CreateUserIdentityId(StringBuilder uuidforId, StringBuilder safetyuserid, StringBuilder identityid) {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:CreateUserIdentityId is Finished after CreateUserIdentityPasswordUUID");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityId Start Time is " + LocalDateTime.now());
		String IdentityId = null;
		IdentityId = uuidforId.toString() + safetyuserid.toString();
		identityid.append(IdentityId);
		//System.out.println(IdentityId);
		log.info(IdentityId);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityId Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param uuidforPassword
	 * @param safetypass
	 * @param identitypass
	 * @return
	 */
	private Response CreateUserIdentityPassword(StringBuilder uuidforPassword, StringBuilder safetypass, StringBuilder identitypass) {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:CreateUserIdentityPassword is Finished after CreateUserIdentityId");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityPassword Start Time is " + LocalDateTime.now());
		String IdentityPassword = null;
		IdentityPassword = uuidforPassword.toString() + safetypass.toString();
		identitypass.append(IdentityPassword);
		//System.out.println(IdentityPassword);
		log.info(IdentityPassword);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:CreateUserIdentityPassword Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * @param request
	 * @param safetypass
	 * @param safetyuserid
	 * @param identityid
	 * @param identitypass
	 * @return
	 * @throws Exception
	 */
	private Response ChangeUserInformation(RequestDTO request, StringBuilder safetypass, StringBuilder safetyuserid, StringBuilder identityid, StringBuilder identitypass) throws Exception {
		new LoginProcessUserUpdate();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:InsertDB is Finished after CreateUserIdentityPassword");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:ChangeUserInformation Start Time is " + LocalDateTime.now());
		final String URL = "jdbc:postgresql://localhost:5432/postgres";
		final String USER = "postgres";
		final String PASSWORD = "password";
		final String SQL = "update mydb set password = ?, name = ?, userid = ?, age = ?, adress = ?, mailadress = ?, useridentityid = ?,  useridentitypassword = ? where userid = ?";
			
		try(Connection connection = DriverManager.getConnection(URL, USER, PASSWORD)){
			connection.setAutoCommit(false);
			
			try(PreparedStatement preparedstatement = connection.prepareStatement(SQL)){
				preparedstatement.setString(1, safetypass.toString());
					preparedstatement.setString(2, request.getname());
						preparedstatement.setString(3, safetyuserid.toString());
							preparedstatement.setInt(4, request.getage());
								preparedstatement.setString(5, request.getadress());
									preparedstatement.setString(6, request.getmailadress());
										preparedstatement.setString(7, identityid.toString());
											preparedstatement.setString(8, identitypass.toString());
												preparedstatement.setString(9, safetyuserid.toString());
													preparedstatement.executeUpdate();
				connection.commit();
			}catch(Exception e) {
				connection.rollback();
				log.error("rollback");
				log.trace(e);
				//System.out.println("rollback");
				throw e;
			}
	}catch(Exception e) {
		log.error("Internal Server Error");
		log.trace(e);
		e.printStackTrace();
	}finally {
		log.info("Success to ChangeUserInformation Record for mydb");
	}
	log.info(URL);
		log.info(USER);
			log.info(PASSWORD);
				log.info(SQL);
					log.info(safetypass.toString());
						log.info(request.getname());
							log.info(safetyuserid.toString());
								log.info(request.getage());
									log.info(request.getadress());
										log.info(request.getmailadress());
											log.info(identityid.toString());
												log.info(identitypass.toString());
													log.info(safetyuserid.toString());
	log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserUpdate, Method:ChangeUserInformation Finish Time is " + LocalDateTime.now());
	return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
}
