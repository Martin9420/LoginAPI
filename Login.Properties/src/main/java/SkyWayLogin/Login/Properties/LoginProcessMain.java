package SkyWayLogin.Login.Properties;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Properties;
import java.util.UUID;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.ws.rs.core.Response;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import EntityDTO.UserDTO;
import EntityDTO.RequestDTO;
import ErrorResponse.ResponseEnumCommon;
import PasswordUtil.PasswordHashUtil;
import ResponseCommon.LoginProcessResponse;
import util.IntegerUtil;
import util.StringUtil;

/**
 * @author Masaki_Fukaya
 *
 */

@RequestScoped
public class LoginProcessMain {
	
	@Inject
	private StringUtil stringutil = new StringUtil();
	
	private IntegerUtil integerutil = new IntegerUtil();
	
	UserDTO body = new UserDTO();
	
	RequestDTO request = new RequestDTO();
	
	private static Logger log;
	
	public LoginProcessMain() {
		log = LogManager.getLogger(LoginProcessMain.this);
	}
	
	/**
	 * 
	 * From the "ErrorResponseEnum" class that defines the error response, add the HTTP Status Code corresponding to each process to the Response Body and return it to the client.<br>
	 * Each status code and message<br>
	 * Status Error generator class: ErrorResponseEnum<br>
	 * Status error response generation class: ErrorResponse<br>
	 * E400(Response.Status.BAD_REQUEST.getStatusCode(), "Error400", "Typo etc.There is an error in the request")<br>
	 * E401(Response.Status.UNAUTHORIZED.getStatusCode(), "Error401", "certification failed.")<br>
	 * E403(Response.Status.FORBIDDEN.getStatusCode(), "Error403", "You do not have access.")<br>
	 * E409(Response.Status.CONFLICT.getStatusCode(), "Error409", "The ID already exists.")<br>
	 * E409UPDATE(Response.Status.CONFLICT.getStatusCode(),"Error409UPDATE", "Unable to update record")<br>
	 * E409DELETE(Response.Status.CONFLICT.getStatusCode(),"Error409DELETE" , "Unable to delete record")<br>
	 * E500(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),"Error500", "DB server connection failed")<br>
	 * 
	 * @param errorresponseenum
	 * @return HTTP Response Code according to each status
	 * @Version 1.0.0
	 */
	public Response GenerateResponse(ResponseEnumCommon responseenumcommon) {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		loginprocessresponse.setTime(LocalDateTime.now().toString());
		loginprocessresponse.setCode(responseenumcommon.getStatus());
		loginprocessresponse.setMessage(responseenumcommon.getResponseMessage());
		return Response.status(responseenumcommon.getStatus()).entity(loginprocessresponse).build();
	}

	/**
	 * 
	 * Controller methods that support CRUD operations for each method<br>
	 * The calling method is<br>
	 *1: RequestBodyCheck (Description: Null check method of request body)<br>
	 *2: AutoGeneratedUseridHash (Description: Method for hashing userid stored in DB)<br>
	 *3: AutoGeneratedPasswordHash (Description: Method for hashing Password stored in DB)<br>
	 *4: CreateDateTimeAuto (Description: Method for managing date and time in each CRUD operation)<br>
	 *5: CreateUserIdentityIdUUID (Description: Method to make userid unique for each user)<br>
	 *6: CreateUserIdentityPasswordUUID (Description: Method to make password unique for each user)<br>
	 *7: CreateUserIdentityId (Description: A method that concatenates a unique userid generated by UUID and a hashed userid)<br>
	 *8: CreateUserIdentityPassword (Description: A method that concatenates a unique password generated by UUID and a hashed password)<br>
	 *9: InsertDB (Description: Method to store requested contents in DB)<br>
	 *Total: 9 Method
	 *
	 * @param body
	 * @param request
	 * @return 201 CREATED
	 * @throws SQLException
	 */
	public Response service(UserDTO body, RequestDTO request) throws SQLException {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		StringBuilder safetypass = new StringBuilder();
		StringBuilder safetyid = new StringBuilder();
		StringBuilder date = new StringBuilder();
		StringBuilder identityid = new StringBuilder();
		StringBuilder identitypass = new StringBuilder();
		StringBuilder uuidforId = new StringBuilder();
		StringBuilder uuidforPassword = new StringBuilder();
		
		//Method:RequestBodyCheck
		Response TypeResponses = RequestBodyCheck(body, request);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:AutoGeneratedUseridHash
		TypeResponses = AutoGeneratedUseridHash(request, safetypass);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:AutoGeneratedPasswordHash
		TypeResponses = AutoGeneratedPasswordHash(request, safetyid);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:CreateDateTimeAuto
		TypeResponses = CreateDateTimeAuto(date);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:CreateUserIdentityIdUUID
		TypeResponses = CreateUserIdentityIdUUID(uuidforId);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:CreateUserIdentityPasswordUUID
		TypeResponses = CreateUserIdentityPasswordUUID(uuidforPassword);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:CreateUserIdentityId
		TypeResponses = CreateUserIdentityId(uuidforId, safetypass, identityid);
			if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
				return TypeResponses;
		}
		
		//Method:CreateUserIdentityPassword
		TypeResponses = CreateUserIdentityPassword(uuidforPassword, safetyid, identitypass);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = SelectUserInfo(request);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:InsertDB
		TypeResponses = InsertDB(request, safetypass, safetyid, date, identityid, identitypass);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		TypeResponses = SendMail(request);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		loginprocessresponse.setTime(LocalDateTime.now().toString());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * Check method to see if all the contents of the request body have been entered<br>
	 * If there is even one uninput item in the content of the request body, 400 Bad Request is returned to the client.<br>
	 * 
	 * @param body
	 * @param request
	 * @return 201 CREATED
	 */
	private Response RequestBodyCheck(UserDTO body, RequestDTO request) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:RequestBodyCheck is Call for Service");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:RequestBodyCheck Start Time is " + LocalDateTime.now());
		if(stringutil.isNullorEmpty(request.getname()) || 
			stringutil.isNullorEmpty(request.getpassword()) || 
			stringutil.isNullorEmpty(request.getsex()) || 
			stringutil.isNullorEmpty(request.getuserid()) ||
			integerutil.isNullorEmpty(request.getage()) || 
			stringutil.isNullorEmpty(request.getadress()) || 
			stringutil.isNullorEmpty(request.getbitAdress()) ||
			stringutil.isNullorEmpty(request.getmailadress())){
			return GenerateResponse(ResponseEnumCommon.E400);
		}
		log.info(request.getname());
			log.info(request.getpassword());
				log.info(request.getsex());
					log.info(request.getuserid());
						log.info(request.getage());
							log.info(request.getadress());
								log.info(request.getmailadress());
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:RequestBodyCheck Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * Method to hash userid of request body<br>
	 * The algorithm is hashed (SHA-256) with "PBKDF2WithHmacSHA256", and KEY_length is composed of 256.<br>
	 * 
	 * @see PasswordUtil.PasswordHashUtil#member label
	 * @param request
	 * @param safetypass
	 * @return 201 CREATED
	 */
	private Response AutoGeneratedUseridHash(RequestDTO request, StringBuilder safetypass) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:AutoGeneratedUseridHash is Finished after RequestBodyCheck");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:AutoGeneratedUseridHash Start Time is " + LocalDateTime.now());
		String safetyPassword1 = PasswordHashUtil.getSaftyPassword("password", request.getuserid());
        //System.out.println(safetyPassword1);
        safetypass.append(safetyPassword1);
        log.info(safetyPassword1);
        log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:AutoGeneratedUseridHash Finish Time is " + LocalDateTime.now());
        return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * Method to hash password of request body<br>
	 * The algorithm is hashed (SHA-256) with "PBKDF2WithHmacSHA256", and KEY_length is composed of 256.<br>
	 * 
	 * @see PasswordUtil.PasswordHashUtil#member label
	 * @param request
	 * @param safetyid
	 * @return 201 CREATED
	 */
	private Response AutoGeneratedPasswordHash(RequestDTO request, StringBuilder safetyid) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:AutoGeneratedPasswordHash is Finished after AutoGeneratedUseridHash");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:AutoGeneratedPasswordHash Start Time is " + LocalDateTime.now());
		String safetyPassword1 = PasswordHashUtil.getSaftyPassword("password", request.getpassword());
        safetyid.append(safetyPassword1);
        log.info(safetyPassword1);
        log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:AutoGeneratedPasswordHash Finish Time is " + LocalDateTime.now());
        return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * Method to generate the date when the request was received in order to store the date newly registered by the user in DB<br>
	 * 
	 * @param date
	 * @return 201 CREATED
	 */
	private Response CreateDateTimeAuto(StringBuilder date) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		log.info("Method:CreateDateTimeAuto is Finished after AutoGeneratedPasswordHash");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateDateTimeAuto Start Time is " + LocalDateTime.now());
		LocalDateTime nowDateTime = LocalDateTime.now();
		DateTimeFormatter java8Format = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
		String java8Disp = nowDateTime.format(java8Format );
		date.append(java8Disp);
		log.info(java8Disp);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateDateTimeAuto Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * A method for generating a unique ID of a user, and a unique value is generated using UUID<br>
	 * 
	 * @param uuidforId
	 * @return 201 CREATED
	 */
	private Response CreateUserIdentityIdUUID(StringBuilder uuidforId) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		log.info("Method:CreateUserIdentityIdUUID is Finished after CreateDateTimeAuto");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityIdUUID Start Time is " + LocalDateTime.now());
		UUID UserIdIdentityUUID = UUID.randomUUID();
		uuidforId.append(UserIdIdentityUUID);
		log.info(UserIdIdentityUUID);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityIdUUID Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * A method for generating a unique Password of a user, and a unique value is generated using UUID<br>
	 * 
	 * @param uuidforPassword
	 * @return 201 CREATED
	 */
	private Response CreateUserIdentityPasswordUUID(StringBuilder uuidforPassword) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		log.info("Method:CreateUserIdentityPasswordUUID is Finished after CreateUserIdentityIdUUID");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityPasswordUUID Start Time is " + LocalDateTime.now());
		UUID UserPasswordIdentityUUID = UUID.randomUUID();
		uuidforPassword.append(UserPasswordIdentityUUID);
		log.info(UserPasswordIdentityUUID);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityPasswordUUID Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * A method that concatenates the hashed user ID with the UUID value generated by CreateUserIdentityIdUUID in order to store the user's unique ID in the DB.<br>
	 * 
	 * @param uuidforId
	 * @param safetypass
	 * @param identityid
	 * @return
	 */
	private Response CreateUserIdentityId(StringBuilder uuidforId,  StringBuilder safetypass, StringBuilder identityid) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:CreateUserIdentityId is Finished after CreateUserIdentityPasswordUUID");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityId Start Time is " + LocalDateTime.now());
		String IdentityId = null;
		IdentityId = uuidforId.toString() + safetypass.toString();
		identityid.append(IdentityId);
		log.info(IdentityId);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityId Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 *  A method that concatenates the hashed user Password with the UUID value generated by CreateUserIdentityPasswordUUID in order to store the user's unique Password in the DB.<br>
	 *  
	 * @param uuidforPassword
	 * @param safetyid
	 * @param identitypass
	 * @return 201 CREATED
	 */
	private Response CreateUserIdentityPassword(StringBuilder uuidforPassword, StringBuilder safetyid, StringBuilder identitypass) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:CreateUserIdentityPassword is Finished after CreateUserIdentityId");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityPassword Start Time is " + LocalDateTime.now());
		String IdentityPassword = null;
		IdentityPassword = uuidforPassword.toString() + safetyid.toString();
		identitypass.append(IdentityPassword);
		log.info(IdentityPassword);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:CreateUserIdentityPassword Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	private Response SelectUserInfo(RequestDTO request) throws SQLException {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		final String URL = "jdbc:postgresql://localhost:5432/postgres";
		final String USER = "postgres";
		final String PASSWORD = "password";
		final String SQL = "select * from mydb where userid =?;";
		try(Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
				PreparedStatement preparedstatement = connection.prepareStatement(SQL)){
			 preparedstatement.setString(1,  request.getuserid());
			 try(ResultSet resultset = preparedstatement.executeQuery()){
						if(resultset.next()) {
							
						}else {
							return GenerateResponse(ResponseEnumCommon.E403);
						}
					}catch(SQLException e) {
						return GenerateResponse(ResponseEnumCommon.E500);
					}catch(Exception e) {
						return GenerateResponse(ResponseEnumCommon.E500);
					}finally {
						
					}
			 return Response.status(Response.Status.CREATED.getStatusCode()).entity( loginprocessresponse).build();
			 }
	}
	
	
	 /**
	 * 
	 * A method that stores the information generated by all the above methods and the information received by the request in the DB.<br>
	 * 
	 * @param request
	 * @param safetypass
	 * @param safetyid
	 * @param date
	 * @param identityid
	 * @param identitypass
	 * @return 201 CREATED
	 */
	private Response InsertDB(RequestDTO request, StringBuilder safetypass, StringBuilder safetyid, StringBuilder date, StringBuilder identityid, StringBuilder identitypass) {
		new LoginProcessMain();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Method:InsertDB is Finished after CreateUserIdentityPassword");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:InsertDB Start Time is " + LocalDateTime.now());
		final String URL = "jdbc:postgresql://localhost:5432/postgres";
		final String USER = "postgres";
		final String PASSWORD = "password";
		final String SQL = "insert into mydb(userid,"
				+ "password,"
				+ "name,"
				+ "adress,"
				+ "nickname,"
				+ "age,"
				+ "sex,"
				+ "createdate,"
				+ "useridentityid,"
				+ "useridentitypassword,"
				+	"bitadress,"
				+ "mailadress)"
				+ " VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
		try(Connection connection = DriverManager.getConnection(URL, USER, PASSWORD)){
			connection.setAutoCommit(false);
			try (PreparedStatement preparedstatement = connection.prepareStatement(SQL)){
				preparedstatement.setString(1, safetypass.toString());
					preparedstatement.setString(2, safetyid.toString());
						preparedstatement.setString(3, request.getname());
							preparedstatement.setString(4, request.getadress());
								preparedstatement.setString(5, request.getnickname());
									preparedstatement.setInt(6, request.getage());
										preparedstatement.setString(7, request.getsex());
											preparedstatement.setString(8, date.toString());
												preparedstatement.setString(9, identityid.toString());
													preparedstatement.setString(10, identitypass.toString());
														preparedstatement.setString(11,request.getbitAdress());
															preparedstatement.setString(12, request.getmailadress());
																preparedstatement.executeUpdate();
				connection.commit();
			}catch(Exception e) {
				connection.rollback();
				log.error("rollback");
				log.trace(e);
				return GenerateResponse(ResponseEnumCommon.E500);
			}
		}catch(Exception e) {
			log.error("Internal Server Error");
			log.trace(e);
			return GenerateResponse(ResponseEnumCommon.E500);
		}finally {
			log.info("Success to Insert DB Record for mydb");
		}
		log.info(URL);
			log.info(USER);
				log.info(PASSWORD);
					log.info(SQL);
						log.info(safetypass.toString());
							log.info(safetyid.toString());
								log.info(request.getname());
									log.info(request.getadress());
										log.info(request.getnickname());
											log.info(request.getage());
												log.info(request.getsex());
													log.info(date.toString());
														log.info(identityid.toString());
															log.info(identitypass.toString());
																log.info(request.getmailadress());
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessMain, Method:InsertDB Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
		}
	
	private Response SendMail(RequestDTO request) {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		String replaced = request.getpassword().replaceAll("[a-z0-9]", "●");
		String title = "件名：[(アプリケーション名)サービス開始のお知らせ]";
		String message = "※このメールはシステムからの自動返信です\n\n" + request.getname() + "様\n"
				+ "お世話になっております。\n"
				+ "(アプリケーション名)でございます。 \n"
				+ "この度は、(アプリケーション名)にご登録頂き誠にありがとうございます。 \n"
				+ "このメールは、ご登録時に確認のため送信させていただいております　\n"
				+ "\n"
				+ "\n"
				+ "----------------------------------------------------------------------------- \n"
				+ "■ご登録頂いた会員ID \n"
				+ "----------------------------------------------------------------------------- \n"
				+ "ユーザID：" + request.getuserid() + "\n"
				+ "パスワード: " + replaced + "\n"
				+ "ユーザID及びパスワードは、 \n"
				+ "(アプリケーション名)サービスにログインする際に必要となります。 \n"
				+ "忘れず保管をお願いいたします。 \n"
				+ "\n"
				+ "\n"
				+ "----------------------------------------------------------------------------- \n"
				+ "■(アプリケーション名)への会員登録後の流れ \n"
				+ "----------------------------------------------------------------------------- \n"
				+ "[1] ログインする \n"
				+ "[2] ミーティングをスケジュールする \n"
				+ "[3] ミーティング開始時刻を確認しミーティングに参加する。 \n"
				+ "\n"
				+ "\n"
				+ "▼▼早速ミーティングをスケジュールする▼▼ \n"
				+ "https://●●●●.co.jp/"
				+ "\n"
				+ "\n"
				+ request.getname() + "様のご利用を心よりお待ち申し上げます。 \n"
				+ "また、ご不明な点がございましたら \n"
				+ "下記までお気軽にお問い合わせくださいませ。 \n"
				+ "\n"
				+ "\n"
				+ "------------------------------------------------------------------------------ \n"
				+ "\n"
				+ "\n"
				+ "------------------------------------------------------------------------------ \n";
				
		try {
			Properties property = new Properties();
			property.put("mail.smtp.host", "smtp.gmail.com");
			property.put("mail.smtp.auth", "true");
			property.put("mail.smtp.starttls.enable", "true");
			property.put("mail.smtp.host", "smtp.gmail.com");
			property.put("mail.smtp.port", "587");
			property.put("mail.smtp.debug", "true");
			
			Session session = Session.getInstance(property, new javax.mail.Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication("jsf23system@gmail.com", "Password@pass");
		}
	});
			MimeMessage mimeMessage = new MimeMessage(session);
			InternetAddress toAddress = new InternetAddress(request.getmailadress(), request.getname());
			mimeMessage.setRecipient(Message.RecipientType.TO, toAddress);
			InternetAddress fromAddress = new InternetAddress("jsf23system@gmail.com", "System System");
			mimeMessage.setFrom(fromAddress);
			mimeMessage.setSubject(title, "ISO-2022-JP");
			mimeMessage.setText(message , "ISO-2022-JP");
			Transport.send(mimeMessage);
			System.out.println("メール送信が完了しました。");
}catch(Exception e) {
	e.printStackTrace();
}
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
}