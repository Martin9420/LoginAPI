package SkyWayLogin.Login.Properties;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDateTime;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.core.Response;

import EntityDTO.UserDTO;
import ErrorResponse.ResponseEnumCommon;
import PasswordUtil.PasswordHashUtil;
import ResponseCommon.ErrorResponse;
import ResponseCommon.LoginProcessResponse;
import ResponseCommon.SuccessResponse;
import EntityDTO.RequestDTO;
import util.StringUtil;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * @author Masaki_Fukaya
 *
 */
@RequestScoped
public class LoginProcessUserDelete {
	
	@Inject
	private StringUtil stringutil = new StringUtil();
	
	UserDTO body = new UserDTO();
	
	RequestDTO request = new RequestDTO();
	
	private static final String TAB ="\t";
	
	private static Logger log;
	
	public LoginProcessUserDelete() {
		log = LogManager.getLogger(LoginProcessUserDelete.this);
	}
	
	public Response GenerateResponse(ResponseEnumCommon responseenumcommon) {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		loginprocessresponse.setTime(LocalDateTime.now().toString());
		loginprocessresponse.setCode(responseenumcommon.getStatus());
		loginprocessresponse.setMessage(responseenumcommon.getResponseMessage());
		return Response.status(responseenumcommon.getStatus()).entity(loginprocessresponse).build();
	}
	
	/**
	 * 
	 * Controller methods that support CRUD operations for each method<br>
	 * The calling method is<br>
	 *1: RequestBodyCheck (Description: Null check method of request body)<br>
	 *2: AutoGeneratedUseridHash (Description: Method for hashing userid stored in DB)<br>
	 *3: AutoGeneratedPasswordHash (Description: Method for hashing Password stored in DB)<br>
	 *4: CreateDateTimeAuto (Description: Method for managing date and time in each CRUD operation)<br>
	 *5: CreateUserIdentityIdUUID (Description: Method to make userid unique for each user)<br>
	 *6: CreateUserIdentityPasswordUUID (Description: Method to make password unique for each user)<br>
	 *7: CreateUserIdentityId (Description: A method that concatenates a unique userid generated by UUID and a hashed userid)<br>
	 *8: CreateUserIdentityPassword (Description: A method that concatenates a unique password generated by UUID and a hashed password)<br>
	 *9: InsertDB (Description: Method to store requested contents in DB)<br>
	 *Total: 9 Method
	 *
	 * @param body
	 * @param request
	 * @return 201 CREATED
	 * @throws SQLException
	 */
	public Response service(UserDTO body, RequestDTO request) {
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		ResponseEnumCommon responseenumcommon = ResponseEnumCommon.S200;
		StringBuilder safetyuserid = new StringBuilder();
		StringBuilder safetypass = new StringBuilder();
		
		//Method;RequestBodyCheck
		Response TypeResponses = RequestBodyCheck(body, request);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:AutoGeneratedUseridHash
		TypeResponses = AutoGeneratedUseridHash(request, safetyuserid);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		
		//Method:AutoGeneratedPasswordHash
		TypeResponses = AutoGeneratedPasswordHash(request, safetypass);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		//Method:UserDeleteforDB
		TypeResponses = UserDeleteforDB(request, safetyuserid);
		if(TypeResponses.getStatus() != Response.Status.CREATED.getStatusCode()) {
			return TypeResponses;
		}
		loginprocessresponse.setCode(responseenumcommon.getStatus());
		loginprocessresponse.setTime(LocalDateTime.now().toString());
		loginprocessresponse.setMessage(responseenumcommon.getResponseMessage());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 *  Check method to see if all the contents of the request body have been entered<br>
	 *  If there is even one uninput item in the content of the request body, 400 Bad Request is returned to the client.<br>
	 *  
	 * @param body
	 * @param request
	 * @return 201 CREATED
	 */
	
	private Response RequestBodyCheck(UserDTO body, RequestDTO request) {
		new LoginProcessUserDelete();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execute condition
		log.info("Method:RequestBodyCheck is Call for Service");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:RequestBodyCheck Start Time is " + LocalDateTime.now());
		if(stringutil.isNullorEmpty(request.getuserid()) || 
			stringutil.isNullorEmpty(request.getpassword())) {
			return GenerateResponse(ResponseEnumCommon.E400);
		}
		log.info(request.getuserid());
			log.info(request.getpassword());
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:RequestBodyCheck Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	/**
	 * Method to hash userid of request body<br>
	 *  The algorithm is hashed (SHA-256) with "PBKDF2WithHmacSHA256", and KEY_length is composed of 256.<br>
	 *  
	 * @param request
	 * @param safetyuserid
	 * @return 201 CREATED
	 */
	private Response AutoGeneratedUseridHash(RequestDTO request, StringBuilder safetyuserid) {
		new LoginProcessUserDelete();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Mrthod:AutoGeneratedUseridHash is Finished after RequestBodyCheck");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:AutoGeneratedUseridHash Start Time is " + LocalDateTime.now());
		String safetyUserId = PasswordHashUtil.getSaftyPassword("password", request.getuserid());
		//System.out.println(safetyUserId);
		safetyuserid.append(safetyUserId);
		log.info(safetyUserId);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:AutoGeneratedUseridHash Finish Time is " + LocalDateTime.now());
		 return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * Method to hash password of request body<br>
	 * The algorithm is hashed (SHA-256) with "PBKDF2WithHmacSHA256", and KEY_length is composed of 256.<br>
	 * 
	 * @param request
	 * @param safetypass
	 * @return 201 CREATED
	 */
	private Response AutoGeneratedPasswordHash(RequestDTO request, StringBuilder safetypass) {
		new LoginProcessUserDelete();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
		log.info("Mrthod:AutoGeneratedPasswordHash is Finished after AutoGeneratedUseridHash");
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:AutoGeneratedPasswordHash Start Time is " + LocalDateTime.now());
		String safetyUserPassword = PasswordHashUtil.getSaftyPassword("password", request.getpassword());
		//System.out.println(safetyUserPassword);
		safetypass.append(safetyUserPassword);
		log.info(safetyUserPassword);
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:AutoGeneratedPasswordHash Finish Time is " + LocalDateTime.now());
		 return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}
	
	/**
	 * Method to make user deletion request to DB<br>
	 * Since the user ID and password stored in the DB are hashed by the SHA-256 algorithm, when a deletion request is received, the user ID and password of the request body must also be hashed before the user to be deleted cannot be searched.<br>
	 * 
	 * @param request
	 * @param safetyuserid
	 * @return
	 */
	private Response UserDeleteforDB(RequestDTO request, StringBuilder safetyuserid) {
		new LoginProcessUserDelete();
		LoginProcessResponse loginprocessresponse = new LoginProcessResponse();
		//Method execution condition
				log.info("Mrthod:UserDeleteforDB is Finished after AutoGeneratedPasswordHash");
				log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:UserDeleteforDB Start Time is " + LocalDateTime.now());
		final String URL = "jdbc:postgresql://localhost:5432/postgres";
		final String USER = "postgres";
		final String PASSWORD = "password";
		final String SQL = "delete from mydb where userid = ?";
		
		try(Connection connection = DriverManager.getConnection(URL, USER, PASSWORD)){
			connection.setAutoCommit(false);
			try(PreparedStatement preparedstatement = connection.prepareStatement(SQL)){
				preparedstatement.setString(1, safetyuserid.toString());
				
				preparedstatement.executeUpdate();
				connection.commit();
			}catch(Exception e) {
				connection.rollback();
				log.error("rollback");
				log.trace(e);
				//System.out.println("rollback");
				//throw e;
			}
		}catch(Exception e) {
			log.error("Internal Server Error");
			log.trace(e);
			//e.printStackTrace();
		}finally {
			log.info("Success to Delete DB Record for mydb");
		}
		log.info(URL);
			log.info(USER);
				log.info(PASSWORD);
					log.info(SQL);
						log.info(safetyuserid.toString());
		log.info("Package:SkyWayLogin.Properties, Class:LoginProcessUserDelete, Method:UserDeleteforDB Finish Time is " + LocalDateTime.now());
		return Response.status(Response.Status.CREATED.getStatusCode()).entity(loginprocessresponse).build();
	}

}
